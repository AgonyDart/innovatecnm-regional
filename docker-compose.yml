services:
  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    restart: always
    ports:
      - "${MQTT_PORT}:${MQTT_PORT}" # standard MQTT
      - "${MQTT_WS_PORT}:${MQTT_WS_PORT}" # WebSocket
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - app-network

  # Database
  db:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    # Use healthcheck to ensure the database is ready for connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend (FastAPI + Data Ingestion & AI)
  backend:
    build: ./backend
    restart: always
    depends_on:
      mosquitto:
        condition: service_started
      db:
        condition: service_healthy # Wait for the DB to be ready
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=${MQTT_PORT}
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - app-network
    # Use healthcheck to ensure the backend API is up and running
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 20s
    # Mount the local source code into the container for hot reloading
    volumes:
      - ./backend:/src/app
    # Override the Dockerfile's CMD to run the development server with hot reload
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (NextJs)
  frontend:
    build: ./frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy # Wait for the backend API to be ready
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:${BACKEND_PORT}
      # Add a private URL for server-side rendering (SSR) to use the internal Docker network
      - NEXT_PRIVATE_BACKEND_URL=http://backend:8000
    networks:
      - app-network
    # Mount the local source code into the container for hot reloading
    volumes:
      - ./frontend:/src/app
      - /src/app/node_modules
    # Override the Dockerfile's CMD to run the development server
    command: npm run dev

# Define a shared network for all services
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
